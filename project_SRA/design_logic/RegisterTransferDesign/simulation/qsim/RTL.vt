// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2022 03:43:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    BusSharing
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BusSharing_vlg_sample_tst(
	CLK,
	In1,
	In2,
	Start,
	sampler_tx
);
input  CLK;
input [15:0] In1;
input [15:0] In2;
input  Start;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or In1 or In2 or Start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module BusSharing_vlg_check_tst (
	Out,
	Q,
	sampler_rx
);
input [15:0] Out;
input [3:0] Q;
input sampler_rx;

reg [15:0] Out_expected;
reg [3:0] Q_expected;

reg [15:0] Out_prev;
reg [3:0] Q_prev;

reg [15:0] Out_expected_prev;
reg [3:0] Q_expected_prev;

reg [15:0] last_Out_exp;
reg [3:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Out_prev = Out;
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	Out_expected_prev = Out_expected;
	Q_expected_prev = Q_expected;
end


// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// expected Out[ 15 ]
initial
begin
	Out_expected[15] = 1'bX;
end 
// expected Out[ 14 ]
initial
begin
	Out_expected[14] = 1'bX;
end 
// expected Out[ 13 ]
initial
begin
	Out_expected[13] = 1'bX;
end 
// expected Out[ 12 ]
initial
begin
	Out_expected[12] = 1'bX;
end 
// expected Out[ 11 ]
initial
begin
	Out_expected[11] = 1'bX;
end 
// expected Out[ 10 ]
initial
begin
	Out_expected[10] = 1'bX;
end 
// expected Out[ 9 ]
initial
begin
	Out_expected[9] = 1'bX;
end 
// expected Out[ 8 ]
initial
begin
	Out_expected[8] = 1'bX;
end 
// expected Out[ 7 ]
initial
begin
	Out_expected[7] = 1'bX;
end 
// expected Out[ 6 ]
initial
begin
	Out_expected[6] = 1'bX;
end 
// expected Out[ 5 ]
initial
begin
	Out_expected[5] = 1'bX;
end 
// expected Out[ 4 ]
initial
begin
	Out_expected[4] = 1'bX;
end 
// expected Out[ 3 ]
initial
begin
	Out_expected[3] = 1'bX;
end 
// expected Out[ 2 ]
initial
begin
	Out_expected[2] = 1'bX;
end 
// expected Out[ 1 ]
initial
begin
	Out_expected[1] = 1'bX;
end 
// expected Out[ 0 ]
initial
begin
	Out_expected[0] = 1'bX;
end 
// generate trigger
always @(Out_expected or Out or Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Out = %b | expected Q = %b | ",Out_expected_prev,Q_expected_prev);
	$display("| real Out = %b | real Q = %b | ",Out_prev,Q_prev);
`endif
	if (
		( Out_expected_prev[0] !== 1'bx ) && ( Out_prev[0] !== Out_expected_prev[0] )
		&& ((Out_expected_prev[0] !== last_Out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[0] = Out_expected_prev[0];
	end
	if (
		( Out_expected_prev[1] !== 1'bx ) && ( Out_prev[1] !== Out_expected_prev[1] )
		&& ((Out_expected_prev[1] !== last_Out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[1] = Out_expected_prev[1];
	end
	if (
		( Out_expected_prev[2] !== 1'bx ) && ( Out_prev[2] !== Out_expected_prev[2] )
		&& ((Out_expected_prev[2] !== last_Out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[2] = Out_expected_prev[2];
	end
	if (
		( Out_expected_prev[3] !== 1'bx ) && ( Out_prev[3] !== Out_expected_prev[3] )
		&& ((Out_expected_prev[3] !== last_Out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[3] = Out_expected_prev[3];
	end
	if (
		( Out_expected_prev[4] !== 1'bx ) && ( Out_prev[4] !== Out_expected_prev[4] )
		&& ((Out_expected_prev[4] !== last_Out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[4] = Out_expected_prev[4];
	end
	if (
		( Out_expected_prev[5] !== 1'bx ) && ( Out_prev[5] !== Out_expected_prev[5] )
		&& ((Out_expected_prev[5] !== last_Out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[5] = Out_expected_prev[5];
	end
	if (
		( Out_expected_prev[6] !== 1'bx ) && ( Out_prev[6] !== Out_expected_prev[6] )
		&& ((Out_expected_prev[6] !== last_Out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[6] = Out_expected_prev[6];
	end
	if (
		( Out_expected_prev[7] !== 1'bx ) && ( Out_prev[7] !== Out_expected_prev[7] )
		&& ((Out_expected_prev[7] !== last_Out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[7] = Out_expected_prev[7];
	end
	if (
		( Out_expected_prev[8] !== 1'bx ) && ( Out_prev[8] !== Out_expected_prev[8] )
		&& ((Out_expected_prev[8] !== last_Out_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[8] = Out_expected_prev[8];
	end
	if (
		( Out_expected_prev[9] !== 1'bx ) && ( Out_prev[9] !== Out_expected_prev[9] )
		&& ((Out_expected_prev[9] !== last_Out_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[9] = Out_expected_prev[9];
	end
	if (
		( Out_expected_prev[10] !== 1'bx ) && ( Out_prev[10] !== Out_expected_prev[10] )
		&& ((Out_expected_prev[10] !== last_Out_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[10] = Out_expected_prev[10];
	end
	if (
		( Out_expected_prev[11] !== 1'bx ) && ( Out_prev[11] !== Out_expected_prev[11] )
		&& ((Out_expected_prev[11] !== last_Out_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[11] = Out_expected_prev[11];
	end
	if (
		( Out_expected_prev[12] !== 1'bx ) && ( Out_prev[12] !== Out_expected_prev[12] )
		&& ((Out_expected_prev[12] !== last_Out_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[12] = Out_expected_prev[12];
	end
	if (
		( Out_expected_prev[13] !== 1'bx ) && ( Out_prev[13] !== Out_expected_prev[13] )
		&& ((Out_expected_prev[13] !== last_Out_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[13] = Out_expected_prev[13];
	end
	if (
		( Out_expected_prev[14] !== 1'bx ) && ( Out_prev[14] !== Out_expected_prev[14] )
		&& ((Out_expected_prev[14] !== last_Out_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[14] = Out_expected_prev[14];
	end
	if (
		( Out_expected_prev[15] !== 1'bx ) && ( Out_prev[15] !== Out_expected_prev[15] )
		&& ((Out_expected_prev[15] !== last_Out_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Out_expected_prev);
		$display ("     Real value = %b", Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Out_exp[15] = Out_expected_prev[15];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module BusSharing_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [15:0] In1;
reg [15:0] In2;
reg Start;
// wires                                               
wire [15:0] Out;
wire [3:0] Q;

wire sampler;                             

// assign statements (if any)                          
BusSharing i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.In1(In1),
	.In2(In2),
	.Out(Out),
	.Q(Q),
	.Start(Start)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #20000 1'b1;
	Start = #20000 1'b0;
end 
// In1[ 15 ]
initial
begin
	In1[15] = 1'b0;
end 
// In1[ 14 ]
initial
begin
	In1[14] = 1'b0;
end 
// In1[ 13 ]
initial
begin
	In1[13] = 1'b0;
end 
// In1[ 12 ]
initial
begin
	In1[12] = 1'b0;
end 
// In1[ 11 ]
initial
begin
	In1[11] = 1'b0;
end 
// In1[ 10 ]
initial
begin
	In1[10] = 1'b0;
end 
// In1[ 9 ]
initial
begin
	In1[9] = 1'b0;
end 
// In1[ 8 ]
initial
begin
	In1[8] = 1'b0;
end 
// In1[ 7 ]
initial
begin
	In1[7] = 1'b0;
end 
// In1[ 6 ]
initial
begin
	In1[6] = 1'b0;
end 
// In1[ 5 ]
initial
begin
	In1[5] = 1'b0;
end 
// In1[ 4 ]
initial
begin
	In1[4] = 1'b0;
end 
// In1[ 3 ]
initial
begin
	In1[3] = 1'b1;
	In1[3] = #30000 1'b0;
end 
// In1[ 2 ]
initial
begin
	In1[2] = 1'b1;
	In1[2] = #30000 1'b0;
end 
// In1[ 1 ]
initial
begin
	In1[1] = 1'b1;
	In1[1] = #30000 1'b0;
end 
// In1[ 0 ]
initial
begin
	In1[0] = 1'b1;
	In1[0] = #30000 1'b0;
end 
// In2[ 15 ]
initial
begin
	In2[15] = 1'b0;
end 
// In2[ 14 ]
initial
begin
	In2[14] = 1'b0;
end 
// In2[ 13 ]
initial
begin
	In2[13] = 1'b0;
end 
// In2[ 12 ]
initial
begin
	In2[12] = 1'b0;
end 
// In2[ 11 ]
initial
begin
	In2[11] = 1'b0;
end 
// In2[ 10 ]
initial
begin
	In2[10] = 1'b0;
end 
// In2[ 9 ]
initial
begin
	In2[9] = 1'b0;
end 
// In2[ 8 ]
initial
begin
	In2[8] = 1'b0;
end 
// In2[ 7 ]
initial
begin
	In2[7] = 1'b0;
end 
// In2[ 6 ]
initial
begin
	In2[6] = 1'b0;
end 
// In2[ 5 ]
initial
begin
	In2[5] = 1'b0;
end 
// In2[ 4 ]
initial
begin
	In2[4] = 1'b1;
	In2[4] = #30000 1'b0;
end 
// In2[ 3 ]
initial
begin
	In2[3] = 1'b0;
end 
// In2[ 2 ]
initial
begin
	In2[2] = 1'b1;
	In2[2] = #30000 1'b0;
end 
// In2[ 1 ]
initial
begin
	In2[1] = 1'b1;
	In2[1] = #30000 1'b0;
end 
// In2[ 0 ]
initial
begin
	In2[0] = 1'b1;
	In2[0] = #30000 1'b0;
end 

BusSharing_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.In1(In1),
	.In2(In2),
	.Start(Start),
	.sampler_tx(sampler)
);

BusSharing_vlg_check_tst tb_out(
	.Out(Out),
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule

