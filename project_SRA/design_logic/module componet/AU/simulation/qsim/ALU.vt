// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2022 02:56:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MinAbsAddSub
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MinAbsAddSub_vlg_sample_tst(
	C,
	R1,
	R2,
	R3,
	sampler_tx
);
input [1:0] C;
input [15:0] R1;
input [15:0] R2;
input [15:0] R3;
output sampler_tx;

reg sample;
time current_time;
always @(C or R1 or R2 or R3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MinAbsAddSub_vlg_check_tst (
	InA,
	InB,
	InI0,
	InI1,
	O,
	sampler_rx
);
input [15:0] InA;
input [15:0] InB;
input [15:0] InI0;
input [15:0] InI1;
input [15:0] O;
input sampler_rx;

reg [15:0] InA_expected;
reg [15:0] InB_expected;
reg [15:0] InI0_expected;
reg [15:0] InI1_expected;
reg [15:0] O_expected;

reg [15:0] InA_prev;
reg [15:0] InB_prev;
reg [15:0] InI0_prev;
reg [15:0] InI1_prev;
reg [15:0] O_prev;

reg [15:0] InA_expected_prev;
reg [15:0] InB_expected_prev;
reg [15:0] InI0_expected_prev;
reg [15:0] InI1_expected_prev;
reg [15:0] O_expected_prev;

reg [15:0] last_InA_exp;
reg [15:0] last_InB_exp;
reg [15:0] last_InI0_exp;
reg [15:0] last_InI1_exp;
reg [15:0] last_O_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	InA_prev = InA;
	InB_prev = InB;
	InI0_prev = InI0;
	InI1_prev = InI1;
	O_prev = O;
end

// update expected /o prevs

always @(trigger)
begin
	InA_expected_prev = InA_expected;
	InB_expected_prev = InB_expected;
	InI0_expected_prev = InI0_expected;
	InI1_expected_prev = InI1_expected;
	O_expected_prev = O_expected;
end


// expected O[ 15 ]
initial
begin
	O_expected[15] = 1'b0;
	O_expected[15] = #180000 1'bX;
end 
// expected O[ 14 ]
initial
begin
	O_expected[14] = 1'b0;
	O_expected[14] = #180000 1'bX;
end 
// expected O[ 13 ]
initial
begin
	O_expected[13] = 1'b0;
	O_expected[13] = #180000 1'bX;
end 
// expected O[ 12 ]
initial
begin
	O_expected[12] = 1'b0;
	O_expected[12] = #180000 1'bX;
end 
// expected O[ 11 ]
initial
begin
	O_expected[11] = 1'b0;
	O_expected[11] = #180000 1'bX;
end 
// expected O[ 10 ]
initial
begin
	O_expected[10] = 1'b0;
	O_expected[10] = #180000 1'bX;
end 
// expected O[ 9 ]
initial
begin
	O_expected[9] = 1'b0;
	O_expected[9] = #180000 1'bX;
end 
// expected O[ 8 ]
initial
begin
	O_expected[8] = 1'b0;
	O_expected[8] = #180000 1'bX;
end 
// expected O[ 7 ]
initial
begin
	O_expected[7] = 1'b0;
	O_expected[7] = #180000 1'bX;
end 
// expected O[ 6 ]
initial
begin
	O_expected[6] = 1'b0;
	O_expected[6] = #180000 1'bX;
end 
// expected O[ 5 ]
initial
begin
	O_expected[5] = 1'b0;
	O_expected[5] = #180000 1'bX;
end 
// expected O[ 4 ]
initial
begin
	O_expected[4] = 1'b0;
	O_expected[4] = #180000 1'bX;
end 
// expected O[ 3 ]
initial
begin
	O_expected[3] = 1'b0;
	O_expected[3] = #180000 1'bX;
end 
// expected O[ 2 ]
initial
begin
	O_expected[2] = 1'b0;
	O_expected[2] = #180000 1'bX;
end 
// expected O[ 1 ]
initial
begin
	O_expected[1] = 1'b0;
	O_expected[1] = #180000 1'bX;
end 
// expected O[ 0 ]
initial
begin
	O_expected[0] = 1'b0;
	O_expected[0] = #180000 1'bX;
end 
// expected InA[ 15 ]
initial
begin
	InA_expected[15] = 1'bX;
end 
// expected InA[ 14 ]
initial
begin
	InA_expected[14] = 1'bX;
end 
// expected InA[ 13 ]
initial
begin
	InA_expected[13] = 1'bX;
end 
// expected InA[ 12 ]
initial
begin
	InA_expected[12] = 1'bX;
end 
// expected InA[ 11 ]
initial
begin
	InA_expected[11] = 1'bX;
end 
// expected InA[ 10 ]
initial
begin
	InA_expected[10] = 1'bX;
end 
// expected InA[ 9 ]
initial
begin
	InA_expected[9] = 1'bX;
end 
// expected InA[ 8 ]
initial
begin
	InA_expected[8] = 1'bX;
end 
// expected InA[ 7 ]
initial
begin
	InA_expected[7] = 1'bX;
end 
// expected InA[ 6 ]
initial
begin
	InA_expected[6] = 1'bX;
end 
// expected InA[ 5 ]
initial
begin
	InA_expected[5] = 1'bX;
end 
// expected InA[ 4 ]
initial
begin
	InA_expected[4] = 1'bX;
end 
// expected InA[ 3 ]
initial
begin
	InA_expected[3] = 1'bX;
end 
// expected InA[ 2 ]
initial
begin
	InA_expected[2] = 1'bX;
end 
// expected InA[ 1 ]
initial
begin
	InA_expected[1] = 1'bX;
end 
// expected InA[ 0 ]
initial
begin
	InA_expected[0] = 1'bX;
end 
// expected InB[ 15 ]
initial
begin
	InB_expected[15] = 1'bX;
end 
// expected InB[ 14 ]
initial
begin
	InB_expected[14] = 1'bX;
end 
// expected InB[ 13 ]
initial
begin
	InB_expected[13] = 1'bX;
end 
// expected InB[ 12 ]
initial
begin
	InB_expected[12] = 1'bX;
end 
// expected InB[ 11 ]
initial
begin
	InB_expected[11] = 1'bX;
end 
// expected InB[ 10 ]
initial
begin
	InB_expected[10] = 1'bX;
end 
// expected InB[ 9 ]
initial
begin
	InB_expected[9] = 1'bX;
end 
// expected InB[ 8 ]
initial
begin
	InB_expected[8] = 1'bX;
end 
// expected InB[ 7 ]
initial
begin
	InB_expected[7] = 1'bX;
end 
// expected InB[ 6 ]
initial
begin
	InB_expected[6] = 1'bX;
end 
// expected InB[ 5 ]
initial
begin
	InB_expected[5] = 1'bX;
end 
// expected InB[ 4 ]
initial
begin
	InB_expected[4] = 1'bX;
end 
// expected InB[ 3 ]
initial
begin
	InB_expected[3] = 1'bX;
end 
// expected InB[ 2 ]
initial
begin
	InB_expected[2] = 1'bX;
end 
// expected InB[ 1 ]
initial
begin
	InB_expected[1] = 1'bX;
end 
// expected InB[ 0 ]
initial
begin
	InB_expected[0] = 1'bX;
end 
// expected InI0[ 15 ]
initial
begin
	InI0_expected[15] = 1'bX;
end 
// expected InI0[ 14 ]
initial
begin
	InI0_expected[14] = 1'bX;
end 
// expected InI0[ 13 ]
initial
begin
	InI0_expected[13] = 1'bX;
end 
// expected InI0[ 12 ]
initial
begin
	InI0_expected[12] = 1'bX;
end 
// expected InI0[ 11 ]
initial
begin
	InI0_expected[11] = 1'bX;
end 
// expected InI0[ 10 ]
initial
begin
	InI0_expected[10] = 1'bX;
end 
// expected InI0[ 9 ]
initial
begin
	InI0_expected[9] = 1'bX;
end 
// expected InI0[ 8 ]
initial
begin
	InI0_expected[8] = 1'bX;
end 
// expected InI0[ 7 ]
initial
begin
	InI0_expected[7] = 1'bX;
end 
// expected InI0[ 6 ]
initial
begin
	InI0_expected[6] = 1'bX;
end 
// expected InI0[ 5 ]
initial
begin
	InI0_expected[5] = 1'bX;
end 
// expected InI0[ 4 ]
initial
begin
	InI0_expected[4] = 1'bX;
end 
// expected InI0[ 3 ]
initial
begin
	InI0_expected[3] = 1'bX;
end 
// expected InI0[ 2 ]
initial
begin
	InI0_expected[2] = 1'bX;
end 
// expected InI0[ 1 ]
initial
begin
	InI0_expected[1] = 1'bX;
end 
// expected InI0[ 0 ]
initial
begin
	InI0_expected[0] = 1'bX;
end 
// expected InI1[ 15 ]
initial
begin
	InI1_expected[15] = 1'bX;
end 
// expected InI1[ 14 ]
initial
begin
	InI1_expected[14] = 1'bX;
end 
// expected InI1[ 13 ]
initial
begin
	InI1_expected[13] = 1'bX;
end 
// expected InI1[ 12 ]
initial
begin
	InI1_expected[12] = 1'bX;
end 
// expected InI1[ 11 ]
initial
begin
	InI1_expected[11] = 1'bX;
end 
// expected InI1[ 10 ]
initial
begin
	InI1_expected[10] = 1'bX;
end 
// expected InI1[ 9 ]
initial
begin
	InI1_expected[9] = 1'bX;
end 
// expected InI1[ 8 ]
initial
begin
	InI1_expected[8] = 1'bX;
end 
// expected InI1[ 7 ]
initial
begin
	InI1_expected[7] = 1'bX;
end 
// expected InI1[ 6 ]
initial
begin
	InI1_expected[6] = 1'bX;
end 
// expected InI1[ 5 ]
initial
begin
	InI1_expected[5] = 1'bX;
end 
// expected InI1[ 4 ]
initial
begin
	InI1_expected[4] = 1'bX;
end 
// expected InI1[ 3 ]
initial
begin
	InI1_expected[3] = 1'bX;
end 
// expected InI1[ 2 ]
initial
begin
	InI1_expected[2] = 1'bX;
end 
// expected InI1[ 1 ]
initial
begin
	InI1_expected[1] = 1'bX;
end 
// expected InI1[ 0 ]
initial
begin
	InI1_expected[0] = 1'bX;
end 
// generate trigger
always @(InA_expected or InA or InB_expected or InB or InI0_expected or InI0 or InI1_expected or InI1 or O_expected or O)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected InA = %b | expected InB = %b | expected InI0 = %b | expected InI1 = %b | expected O = %b | ",InA_expected_prev,InB_expected_prev,InI0_expected_prev,InI1_expected_prev,O_expected_prev);
	$display("| real InA = %b | real InB = %b | real InI0 = %b | real InI1 = %b | real O = %b | ",InA_prev,InB_prev,InI0_prev,InI1_prev,O_prev);
`endif
	if (
		( InA_expected_prev[0] !== 1'bx ) && ( InA_prev[0] !== InA_expected_prev[0] )
		&& ((InA_expected_prev[0] !== last_InA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[0] = InA_expected_prev[0];
	end
	if (
		( InA_expected_prev[1] !== 1'bx ) && ( InA_prev[1] !== InA_expected_prev[1] )
		&& ((InA_expected_prev[1] !== last_InA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[1] = InA_expected_prev[1];
	end
	if (
		( InA_expected_prev[2] !== 1'bx ) && ( InA_prev[2] !== InA_expected_prev[2] )
		&& ((InA_expected_prev[2] !== last_InA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[2] = InA_expected_prev[2];
	end
	if (
		( InA_expected_prev[3] !== 1'bx ) && ( InA_prev[3] !== InA_expected_prev[3] )
		&& ((InA_expected_prev[3] !== last_InA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[3] = InA_expected_prev[3];
	end
	if (
		( InA_expected_prev[4] !== 1'bx ) && ( InA_prev[4] !== InA_expected_prev[4] )
		&& ((InA_expected_prev[4] !== last_InA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[4] = InA_expected_prev[4];
	end
	if (
		( InA_expected_prev[5] !== 1'bx ) && ( InA_prev[5] !== InA_expected_prev[5] )
		&& ((InA_expected_prev[5] !== last_InA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[5] = InA_expected_prev[5];
	end
	if (
		( InA_expected_prev[6] !== 1'bx ) && ( InA_prev[6] !== InA_expected_prev[6] )
		&& ((InA_expected_prev[6] !== last_InA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[6] = InA_expected_prev[6];
	end
	if (
		( InA_expected_prev[7] !== 1'bx ) && ( InA_prev[7] !== InA_expected_prev[7] )
		&& ((InA_expected_prev[7] !== last_InA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[7] = InA_expected_prev[7];
	end
	if (
		( InA_expected_prev[8] !== 1'bx ) && ( InA_prev[8] !== InA_expected_prev[8] )
		&& ((InA_expected_prev[8] !== last_InA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[8] = InA_expected_prev[8];
	end
	if (
		( InA_expected_prev[9] !== 1'bx ) && ( InA_prev[9] !== InA_expected_prev[9] )
		&& ((InA_expected_prev[9] !== last_InA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[9] = InA_expected_prev[9];
	end
	if (
		( InA_expected_prev[10] !== 1'bx ) && ( InA_prev[10] !== InA_expected_prev[10] )
		&& ((InA_expected_prev[10] !== last_InA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[10] = InA_expected_prev[10];
	end
	if (
		( InA_expected_prev[11] !== 1'bx ) && ( InA_prev[11] !== InA_expected_prev[11] )
		&& ((InA_expected_prev[11] !== last_InA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[11] = InA_expected_prev[11];
	end
	if (
		( InA_expected_prev[12] !== 1'bx ) && ( InA_prev[12] !== InA_expected_prev[12] )
		&& ((InA_expected_prev[12] !== last_InA_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[12] = InA_expected_prev[12];
	end
	if (
		( InA_expected_prev[13] !== 1'bx ) && ( InA_prev[13] !== InA_expected_prev[13] )
		&& ((InA_expected_prev[13] !== last_InA_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[13] = InA_expected_prev[13];
	end
	if (
		( InA_expected_prev[14] !== 1'bx ) && ( InA_prev[14] !== InA_expected_prev[14] )
		&& ((InA_expected_prev[14] !== last_InA_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[14] = InA_expected_prev[14];
	end
	if (
		( InA_expected_prev[15] !== 1'bx ) && ( InA_prev[15] !== InA_expected_prev[15] )
		&& ((InA_expected_prev[15] !== last_InA_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InA_expected_prev);
		$display ("     Real value = %b", InA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_InA_exp[15] = InA_expected_prev[15];
	end
	if (
		( InB_expected_prev[0] !== 1'bx ) && ( InB_prev[0] !== InB_expected_prev[0] )
		&& ((InB_expected_prev[0] !== last_InB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[0] = InB_expected_prev[0];
	end
	if (
		( InB_expected_prev[1] !== 1'bx ) && ( InB_prev[1] !== InB_expected_prev[1] )
		&& ((InB_expected_prev[1] !== last_InB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[1] = InB_expected_prev[1];
	end
	if (
		( InB_expected_prev[2] !== 1'bx ) && ( InB_prev[2] !== InB_expected_prev[2] )
		&& ((InB_expected_prev[2] !== last_InB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[2] = InB_expected_prev[2];
	end
	if (
		( InB_expected_prev[3] !== 1'bx ) && ( InB_prev[3] !== InB_expected_prev[3] )
		&& ((InB_expected_prev[3] !== last_InB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[3] = InB_expected_prev[3];
	end
	if (
		( InB_expected_prev[4] !== 1'bx ) && ( InB_prev[4] !== InB_expected_prev[4] )
		&& ((InB_expected_prev[4] !== last_InB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[4] = InB_expected_prev[4];
	end
	if (
		( InB_expected_prev[5] !== 1'bx ) && ( InB_prev[5] !== InB_expected_prev[5] )
		&& ((InB_expected_prev[5] !== last_InB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[5] = InB_expected_prev[5];
	end
	if (
		( InB_expected_prev[6] !== 1'bx ) && ( InB_prev[6] !== InB_expected_prev[6] )
		&& ((InB_expected_prev[6] !== last_InB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[6] = InB_expected_prev[6];
	end
	if (
		( InB_expected_prev[7] !== 1'bx ) && ( InB_prev[7] !== InB_expected_prev[7] )
		&& ((InB_expected_prev[7] !== last_InB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[7] = InB_expected_prev[7];
	end
	if (
		( InB_expected_prev[8] !== 1'bx ) && ( InB_prev[8] !== InB_expected_prev[8] )
		&& ((InB_expected_prev[8] !== last_InB_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[8] = InB_expected_prev[8];
	end
	if (
		( InB_expected_prev[9] !== 1'bx ) && ( InB_prev[9] !== InB_expected_prev[9] )
		&& ((InB_expected_prev[9] !== last_InB_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[9] = InB_expected_prev[9];
	end
	if (
		( InB_expected_prev[10] !== 1'bx ) && ( InB_prev[10] !== InB_expected_prev[10] )
		&& ((InB_expected_prev[10] !== last_InB_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[10] = InB_expected_prev[10];
	end
	if (
		( InB_expected_prev[11] !== 1'bx ) && ( InB_prev[11] !== InB_expected_prev[11] )
		&& ((InB_expected_prev[11] !== last_InB_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[11] = InB_expected_prev[11];
	end
	if (
		( InB_expected_prev[12] !== 1'bx ) && ( InB_prev[12] !== InB_expected_prev[12] )
		&& ((InB_expected_prev[12] !== last_InB_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[12] = InB_expected_prev[12];
	end
	if (
		( InB_expected_prev[13] !== 1'bx ) && ( InB_prev[13] !== InB_expected_prev[13] )
		&& ((InB_expected_prev[13] !== last_InB_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[13] = InB_expected_prev[13];
	end
	if (
		( InB_expected_prev[14] !== 1'bx ) && ( InB_prev[14] !== InB_expected_prev[14] )
		&& ((InB_expected_prev[14] !== last_InB_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[14] = InB_expected_prev[14];
	end
	if (
		( InB_expected_prev[15] !== 1'bx ) && ( InB_prev[15] !== InB_expected_prev[15] )
		&& ((InB_expected_prev[15] !== last_InB_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InB_expected_prev);
		$display ("     Real value = %b", InB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InB_exp[15] = InB_expected_prev[15];
	end
	if (
		( InI0_expected_prev[0] !== 1'bx ) && ( InI0_prev[0] !== InI0_expected_prev[0] )
		&& ((InI0_expected_prev[0] !== last_InI0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[0] = InI0_expected_prev[0];
	end
	if (
		( InI0_expected_prev[1] !== 1'bx ) && ( InI0_prev[1] !== InI0_expected_prev[1] )
		&& ((InI0_expected_prev[1] !== last_InI0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[1] = InI0_expected_prev[1];
	end
	if (
		( InI0_expected_prev[2] !== 1'bx ) && ( InI0_prev[2] !== InI0_expected_prev[2] )
		&& ((InI0_expected_prev[2] !== last_InI0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[2] = InI0_expected_prev[2];
	end
	if (
		( InI0_expected_prev[3] !== 1'bx ) && ( InI0_prev[3] !== InI0_expected_prev[3] )
		&& ((InI0_expected_prev[3] !== last_InI0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[3] = InI0_expected_prev[3];
	end
	if (
		( InI0_expected_prev[4] !== 1'bx ) && ( InI0_prev[4] !== InI0_expected_prev[4] )
		&& ((InI0_expected_prev[4] !== last_InI0_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[4] = InI0_expected_prev[4];
	end
	if (
		( InI0_expected_prev[5] !== 1'bx ) && ( InI0_prev[5] !== InI0_expected_prev[5] )
		&& ((InI0_expected_prev[5] !== last_InI0_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[5] = InI0_expected_prev[5];
	end
	if (
		( InI0_expected_prev[6] !== 1'bx ) && ( InI0_prev[6] !== InI0_expected_prev[6] )
		&& ((InI0_expected_prev[6] !== last_InI0_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[6] = InI0_expected_prev[6];
	end
	if (
		( InI0_expected_prev[7] !== 1'bx ) && ( InI0_prev[7] !== InI0_expected_prev[7] )
		&& ((InI0_expected_prev[7] !== last_InI0_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[7] = InI0_expected_prev[7];
	end
	if (
		( InI0_expected_prev[8] !== 1'bx ) && ( InI0_prev[8] !== InI0_expected_prev[8] )
		&& ((InI0_expected_prev[8] !== last_InI0_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[8] = InI0_expected_prev[8];
	end
	if (
		( InI0_expected_prev[9] !== 1'bx ) && ( InI0_prev[9] !== InI0_expected_prev[9] )
		&& ((InI0_expected_prev[9] !== last_InI0_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[9] = InI0_expected_prev[9];
	end
	if (
		( InI0_expected_prev[10] !== 1'bx ) && ( InI0_prev[10] !== InI0_expected_prev[10] )
		&& ((InI0_expected_prev[10] !== last_InI0_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[10] = InI0_expected_prev[10];
	end
	if (
		( InI0_expected_prev[11] !== 1'bx ) && ( InI0_prev[11] !== InI0_expected_prev[11] )
		&& ((InI0_expected_prev[11] !== last_InI0_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[11] = InI0_expected_prev[11];
	end
	if (
		( InI0_expected_prev[12] !== 1'bx ) && ( InI0_prev[12] !== InI0_expected_prev[12] )
		&& ((InI0_expected_prev[12] !== last_InI0_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[12] = InI0_expected_prev[12];
	end
	if (
		( InI0_expected_prev[13] !== 1'bx ) && ( InI0_prev[13] !== InI0_expected_prev[13] )
		&& ((InI0_expected_prev[13] !== last_InI0_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[13] = InI0_expected_prev[13];
	end
	if (
		( InI0_expected_prev[14] !== 1'bx ) && ( InI0_prev[14] !== InI0_expected_prev[14] )
		&& ((InI0_expected_prev[14] !== last_InI0_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[14] = InI0_expected_prev[14];
	end
	if (
		( InI0_expected_prev[15] !== 1'bx ) && ( InI0_prev[15] !== InI0_expected_prev[15] )
		&& ((InI0_expected_prev[15] !== last_InI0_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI0_expected_prev);
		$display ("     Real value = %b", InI0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_InI0_exp[15] = InI0_expected_prev[15];
	end
	if (
		( InI1_expected_prev[0] !== 1'bx ) && ( InI1_prev[0] !== InI1_expected_prev[0] )
		&& ((InI1_expected_prev[0] !== last_InI1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[0] = InI1_expected_prev[0];
	end
	if (
		( InI1_expected_prev[1] !== 1'bx ) && ( InI1_prev[1] !== InI1_expected_prev[1] )
		&& ((InI1_expected_prev[1] !== last_InI1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[1] = InI1_expected_prev[1];
	end
	if (
		( InI1_expected_prev[2] !== 1'bx ) && ( InI1_prev[2] !== InI1_expected_prev[2] )
		&& ((InI1_expected_prev[2] !== last_InI1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[2] = InI1_expected_prev[2];
	end
	if (
		( InI1_expected_prev[3] !== 1'bx ) && ( InI1_prev[3] !== InI1_expected_prev[3] )
		&& ((InI1_expected_prev[3] !== last_InI1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[3] = InI1_expected_prev[3];
	end
	if (
		( InI1_expected_prev[4] !== 1'bx ) && ( InI1_prev[4] !== InI1_expected_prev[4] )
		&& ((InI1_expected_prev[4] !== last_InI1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[4] = InI1_expected_prev[4];
	end
	if (
		( InI1_expected_prev[5] !== 1'bx ) && ( InI1_prev[5] !== InI1_expected_prev[5] )
		&& ((InI1_expected_prev[5] !== last_InI1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[5] = InI1_expected_prev[5];
	end
	if (
		( InI1_expected_prev[6] !== 1'bx ) && ( InI1_prev[6] !== InI1_expected_prev[6] )
		&& ((InI1_expected_prev[6] !== last_InI1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[6] = InI1_expected_prev[6];
	end
	if (
		( InI1_expected_prev[7] !== 1'bx ) && ( InI1_prev[7] !== InI1_expected_prev[7] )
		&& ((InI1_expected_prev[7] !== last_InI1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[7] = InI1_expected_prev[7];
	end
	if (
		( InI1_expected_prev[8] !== 1'bx ) && ( InI1_prev[8] !== InI1_expected_prev[8] )
		&& ((InI1_expected_prev[8] !== last_InI1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[8] = InI1_expected_prev[8];
	end
	if (
		( InI1_expected_prev[9] !== 1'bx ) && ( InI1_prev[9] !== InI1_expected_prev[9] )
		&& ((InI1_expected_prev[9] !== last_InI1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[9] = InI1_expected_prev[9];
	end
	if (
		( InI1_expected_prev[10] !== 1'bx ) && ( InI1_prev[10] !== InI1_expected_prev[10] )
		&& ((InI1_expected_prev[10] !== last_InI1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[10] = InI1_expected_prev[10];
	end
	if (
		( InI1_expected_prev[11] !== 1'bx ) && ( InI1_prev[11] !== InI1_expected_prev[11] )
		&& ((InI1_expected_prev[11] !== last_InI1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[11] = InI1_expected_prev[11];
	end
	if (
		( InI1_expected_prev[12] !== 1'bx ) && ( InI1_prev[12] !== InI1_expected_prev[12] )
		&& ((InI1_expected_prev[12] !== last_InI1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[12] = InI1_expected_prev[12];
	end
	if (
		( InI1_expected_prev[13] !== 1'bx ) && ( InI1_prev[13] !== InI1_expected_prev[13] )
		&& ((InI1_expected_prev[13] !== last_InI1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[13] = InI1_expected_prev[13];
	end
	if (
		( InI1_expected_prev[14] !== 1'bx ) && ( InI1_prev[14] !== InI1_expected_prev[14] )
		&& ((InI1_expected_prev[14] !== last_InI1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[14] = InI1_expected_prev[14];
	end
	if (
		( InI1_expected_prev[15] !== 1'bx ) && ( InI1_prev[15] !== InI1_expected_prev[15] )
		&& ((InI1_expected_prev[15] !== last_InI1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InI1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InI1_expected_prev);
		$display ("     Real value = %b", InI1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_InI1_exp[15] = InI1_expected_prev[15];
	end
	if (
		( O_expected_prev[0] !== 1'bx ) && ( O_prev[0] !== O_expected_prev[0] )
		&& ((O_expected_prev[0] !== last_O_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[0] = O_expected_prev[0];
	end
	if (
		( O_expected_prev[1] !== 1'bx ) && ( O_prev[1] !== O_expected_prev[1] )
		&& ((O_expected_prev[1] !== last_O_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[1] = O_expected_prev[1];
	end
	if (
		( O_expected_prev[2] !== 1'bx ) && ( O_prev[2] !== O_expected_prev[2] )
		&& ((O_expected_prev[2] !== last_O_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[2] = O_expected_prev[2];
	end
	if (
		( O_expected_prev[3] !== 1'bx ) && ( O_prev[3] !== O_expected_prev[3] )
		&& ((O_expected_prev[3] !== last_O_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[3] = O_expected_prev[3];
	end
	if (
		( O_expected_prev[4] !== 1'bx ) && ( O_prev[4] !== O_expected_prev[4] )
		&& ((O_expected_prev[4] !== last_O_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[4] = O_expected_prev[4];
	end
	if (
		( O_expected_prev[5] !== 1'bx ) && ( O_prev[5] !== O_expected_prev[5] )
		&& ((O_expected_prev[5] !== last_O_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[5] = O_expected_prev[5];
	end
	if (
		( O_expected_prev[6] !== 1'bx ) && ( O_prev[6] !== O_expected_prev[6] )
		&& ((O_expected_prev[6] !== last_O_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[6] = O_expected_prev[6];
	end
	if (
		( O_expected_prev[7] !== 1'bx ) && ( O_prev[7] !== O_expected_prev[7] )
		&& ((O_expected_prev[7] !== last_O_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[7] = O_expected_prev[7];
	end
	if (
		( O_expected_prev[8] !== 1'bx ) && ( O_prev[8] !== O_expected_prev[8] )
		&& ((O_expected_prev[8] !== last_O_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[8] = O_expected_prev[8];
	end
	if (
		( O_expected_prev[9] !== 1'bx ) && ( O_prev[9] !== O_expected_prev[9] )
		&& ((O_expected_prev[9] !== last_O_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[9] = O_expected_prev[9];
	end
	if (
		( O_expected_prev[10] !== 1'bx ) && ( O_prev[10] !== O_expected_prev[10] )
		&& ((O_expected_prev[10] !== last_O_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[10] = O_expected_prev[10];
	end
	if (
		( O_expected_prev[11] !== 1'bx ) && ( O_prev[11] !== O_expected_prev[11] )
		&& ((O_expected_prev[11] !== last_O_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[11] = O_expected_prev[11];
	end
	if (
		( O_expected_prev[12] !== 1'bx ) && ( O_prev[12] !== O_expected_prev[12] )
		&& ((O_expected_prev[12] !== last_O_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[12] = O_expected_prev[12];
	end
	if (
		( O_expected_prev[13] !== 1'bx ) && ( O_prev[13] !== O_expected_prev[13] )
		&& ((O_expected_prev[13] !== last_O_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[13] = O_expected_prev[13];
	end
	if (
		( O_expected_prev[14] !== 1'bx ) && ( O_prev[14] !== O_expected_prev[14] )
		&& ((O_expected_prev[14] !== last_O_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[14] = O_expected_prev[14];
	end
	if (
		( O_expected_prev[15] !== 1'bx ) && ( O_prev[15] !== O_expected_prev[15] )
		&& ((O_expected_prev[15] !== last_O_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port O[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", O_expected_prev);
		$display ("     Real value = %b", O_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_O_exp[15] = O_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MinAbsAddSub_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] C;
reg [15:0] R1;
reg [15:0] R2;
reg [15:0] R3;
// wires                                               
wire [15:0] InA;
wire [15:0] InB;
wire [15:0] InI0;
wire [15:0] InI1;
wire [15:0] O;

wire sampler;                             

// assign statements (if any)                          
MinAbsAddSub i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.InA(InA),
	.InB(InB),
	.InI0(InI0),
	.InI1(InI1),
	.O(O),
	.R1(R1),
	.R2(R2),
	.R3(R3)
);
// C[ 1 ]
initial
begin
	C[1] = 1'b0;
	C[1] = #120000 1'b1;
	# 40000;
	repeat(10)
	begin
		C[1] = 1'b0;
		C[1] = #40000 1'b1;
		# 40000;
	end
	C[1] = 1'b0;
end 
// C[ 0 ]
initial
begin
	C[0] = 1'b0;
	C[0] = #100000 1'b1;
	# 20000;
	repeat(22)
	begin
		C[0] = 1'b0;
		C[0] = #20000 1'b1;
		# 20000;
	end
end 
// R1[ 15 ]
initial
begin
	R1[15] = 1'b0;
	R1[15] = #640000 1'b1;
end 
// R1[ 14 ]
initial
begin
	R1[14] = 1'b0;
	R1[14] = #320000 1'b1;
	R1[14] = #320000 1'b0;
	R1[14] = #340000 1'b1;
end 
// R1[ 13 ]
initial
begin
	repeat(2)
	begin
		R1[13] = 1'b0;
		R1[13] = #160000 1'b1;
		# 160000;
	end
	R1[13] = 1'b0;
	R1[13] = #160000 1'b1;
	R1[13] = #180000 1'b0;
end 
// R1[ 12 ]
initial
begin
	repeat(5)
	begin
		R1[12] = 1'b0;
		R1[12] = #80000 1'b1;
		# 80000;
	end
	R1[12] = 1'b0;
	R1[12] = #100000 1'b1;
	R1[12] = #80000 1'b0;
end 
// R1[ 11 ]
initial
begin
	repeat(10)
	begin
		R1[11] = 1'b0;
		R1[11] = #40000 1'b1;
		# 40000;
	end
	R1[11] = 1'b0;
	R1[11] = #60000 1'b1;
	R1[11] = #40000 1'b0;
	R1[11] = #40000 1'b1;
	R1[11] = #40000 1'b0;
end 
// R1[ 10 ]
initial
begin
	repeat(20)
	begin
		R1[10] = 1'b0;
		R1[10] = #20000 1'b1;
		# 20000;
	end
	R1[10] = 1'b0;
	R1[10] = #20000 1'b1;
	# 40000;
	repeat(3)
	begin
		R1[10] = 1'b0;
		R1[10] = #20000 1'b1;
		# 20000;
	end
	R1[10] = 1'b0;
end 
// R1[ 9 ]
initial
begin
	R1[9] = 1'b1;
	R1[9] = #420000 1'b0;
	R1[9] = #420000 1'b1;
end 
// R1[ 8 ]
initial
begin
	R1[8] = 1'b1;
	R1[8] = #200000 1'b0;
	R1[8] = #220000 1'b1;
	R1[8] = #220000 1'b0;
	R1[8] = #200000 1'b1;
end 
// R1[ 7 ]
initial
begin
	R1[7] = 1'b1;
	R1[7] = #100000 1'b0;
	R1[7] = #100000 1'b1;
	R1[7] = #120000 1'b0;
	R1[7] = #100000 1'b1;
	R1[7] = #100000 1'b0;
	R1[7] = #120000 1'b1;
	R1[7] = #100000 1'b0;
	R1[7] = #100000 1'b1;
	R1[7] = #120000 1'b0;
end 
// R1[ 6 ]
initial
begin
	repeat(3)
	begin
		R1[6] = 1'b1;
		R1[6] = #40000 1'b0;
		R1[6] = #60000 1'b1;
		R1[6] = #60000 1'b0;
		R1[6] = #40000 1'b1;
		R1[6] = #60000 1'b0;
		# 60000;
	end
	R1[6] = 1'b1;
end 
// R1[ 5 ]
initial
begin
	repeat(6)
	begin
		R1[5] = 1'b1;
		R1[5] = #20000 1'b0;
		R1[5] = #20000 1'b1;
		R1[5] = #40000 1'b0;
		R1[5] = #20000 1'b1;
		R1[5] = #20000 1'b0;
		# 40000;
	end
	R1[5] = 1'b1;
	R1[5] = #20000 1'b0;
end 
// R1[ 4 ]
initial
begin
	R1[4] = 1'b0;
	# 20000;
	repeat(12)
	begin
		R1[4] = 1'b1;
		R1[4] = #40000 1'b0;
		# 40000;
	end
	R1[4] = 1'b1;
end 
// R1[ 3 ]
always
begin
	R1[3] = 1'b1;
	R1[3] = #20000 1'b0;
	#20000;
end 
// R1[ 2 ]
initial
begin
	R1[2] = 1'b0;
end 
// R1[ 1 ]
initial
begin
	R1[1] = 1'b0;
end 
// R1[ 0 ]
initial
begin
	R1[0] = 1'b0;
end 
// R2[ 15 ]
initial
begin
	R2[15] = 1'b1;
	R2[15] = #60000 1'b0;
	R2[15] = #360000 1'b1;
	R2[15] = #440000 1'b0;
end 
// R2[ 14 ]
initial
begin
	R2[14] = 1'b1;
	R2[14] = #60000 1'b0;
	R2[14] = #140000 1'b1;
	R2[14] = #220000 1'b0;
	R2[14] = #220000 1'b1;
	R2[14] = #220000 1'b0;
end 
// R2[ 13 ]
initial
begin
	R2[13] = 1'b1;
	R2[13] = #60000 1'b0;
	R2[13] = #40000 1'b1;
	R2[13] = #100000 1'b0;
	R2[13] = #120000 1'b1;
	# 100000;
	repeat(2)
	begin
		R2[13] = 1'b0;
		R2[13] = #100000 1'b1;
		# 120000;
	end
	R2[13] = 1'b0;
	R2[13] = #100000 1'b1;
end 
// R2[ 12 ]
initial
begin
	R2[12] = 1'b0;
	R2[12] = #20000 1'b1;
	R2[12] = #40000 1'b0;
	R2[12] = #80000 1'b1;
	R2[12] = #60000 1'b0;
	R2[12] = #60000 1'b1;
	R2[12] = #60000 1'b0;
	# 40000;
	repeat(2)
	begin
		R2[12] = 1'b1;
		R2[12] = #60000 1'b0;
		R2[12] = #60000 1'b1;
		R2[12] = #40000 1'b0;
		# 60000;
	end
	R2[12] = 1'b1;
	R2[12] = #60000 1'b0;
	R2[12] = #60000 1'b1;
	R2[12] = #40000 1'b0;
end 
// R2[ 11 ]
initial
begin
	R2[11] = 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #30000 1'b1;
	R2[11] = #10000 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #40000 1'b1;
	# 20000;
	repeat(2)
	begin
		R2[11] = 1'b0;
		R2[11] = #20000 1'b1;
		# 40000;
	end
	R2[11] = 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #40000 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #40000 1'b0;
	# 20000;
	repeat(2)
	begin
		R2[11] = 1'b1;
		R2[11] = #20000 1'b0;
		# 40000;
	end
	R2[11] = 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #40000 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #20000 1'b0;
	R2[11] = #40000 1'b1;
	# 20000;
	repeat(2)
	begin
		R2[11] = 1'b0;
		R2[11] = #20000 1'b1;
		# 40000;
	end
	R2[11] = 1'b0;
	R2[11] = #20000 1'b1;
	R2[11] = #20000 1'b0;
end 
// R2[ 10 ]
initial
begin
	repeat(3)
	begin
		R2[10] = 1'b0;
		R2[10] = #10000 1'b1;
		# 10000;
	end
	R2[10] = 1'b0;
	R2[10] = #20000 1'b1;
	R2[10] = #10000 1'b0;
	R2[10] = #10000 1'b1;
	R2[10] = #20000 1'b0;
	R2[10] = #40000 1'b1;
	R2[10] = #40000 1'b0;
	# 40000;
	repeat(2)
	begin
		R2[10] = 1'b1;
		# 20000;
		repeat(3)
		begin
			R2[10] = 1'b0;
			R2[10] = #40000 1'b1;
			# 40000;
		end
		R2[10] = 1'b0;
		# 40000;
	end
	R2[10] = 1'b1;
	R2[10] = #20000 1'b0;
	R2[10] = #40000 1'b1;
	R2[10] = #40000 1'b0;
	R2[10] = #40000 1'b1;
end 
// R2[ 9 ]
initial
begin
	R2[9] = 1'b0;
	R2[9] = #70000 1'b1;
	R2[9] = #30000 1'b0;
	# 20000;
	repeat(3)
	begin
		R2[9] = 1'b1;
		R2[9] = #20000 1'b0;
		# 20000;
	end
	R2[9] = 1'b1;
	# 40000;
	repeat(6)
	begin
		R2[9] = 1'b0;
		R2[9] = #20000 1'b1;
		# 20000;
	end
	R2[9] = 1'b0;
	R2[9] = #20000 1'b1;
	# 40000;
	repeat(6)
	begin
		R2[9] = 1'b0;
		R2[9] = #20000 1'b1;
		# 20000;
	end
	R2[9] = 1'b0;
	# 40000;
	repeat(3)
	begin
		R2[9] = 1'b1;
		R2[9] = #20000 1'b0;
		# 20000;
	end
	R2[9] = 1'b1;
end 
// R2[ 8 ]
initial
begin
	R2[8] = 1'b0;
	R2[8] = #70000 1'b1;
	R2[8] = #50000 1'b0;
	R2[8] = #140000 1'b1;
	# 160000;
	repeat(2)
	begin
		R2[8] = 1'b0;
		R2[8] = #140000 1'b1;
		# 140000;
	end
	R2[8] = 1'b0;
end 
// R2[ 7 ]
initial
begin
	R2[7] = 1'b1;
	R2[7] = #10000 1'b0;
	R2[7] = #60000 1'b1;
	R2[7] = #30000 1'b0;
	R2[7] = #20000 1'b1;
	R2[7] = #80000 1'b0;
	R2[7] = #60000 1'b1;
	# 80000;
	repeat(4)
	begin
		R2[7] = 1'b0;
		R2[7] = #80000 1'b1;
		# 60000;
	end
	R2[7] = 1'b0;
	R2[7] = #80000 1'b1;
end 
// R2[ 6 ]
initial
begin
	R2[6] = 1'b0;
	R2[6] = #10000 1'b1;
	R2[6] = #30000 1'b0;
	R2[6] = #30000 1'b1;
	R2[6] = #20000 1'b0;
	R2[6] = #30000 1'b1;
	R2[6] = #40000 1'b0;
	R2[6] = #40000 1'b1;
	R2[6] = #40000 1'b0;
	R2[6] = #20000 1'b1;
	# 40000;
	repeat(2)
	begin
		R2[6] = 1'b0;
		R2[6] = #40000 1'b1;
		R2[6] = #40000 1'b0;
		R2[6] = #40000 1'b1;
		# 20000;
	end
	repeat(2)
	begin
		R2[6] = 1'b0;
		R2[6] = #40000 1'b1;
		# 40000;
	end
	R2[6] = 1'b0;
	R2[6] = #20000 1'b1;
	R2[6] = #40000 1'b0;
	R2[6] = #40000 1'b1;
	R2[6] = #40000 1'b0;
	R2[6] = #20000 1'b1;
	R2[6] = #40000 1'b0;
	R2[6] = #40000 1'b1;
end 
// R2[ 5 ]
initial
begin
	R2[5] = 1'b0;
	R2[5] = #10000 1'b1;
	R2[5] = #20000 1'b0;
	R2[5] = #10000 1'b1;
	R2[5] = #10000 1'b0;
	R2[5] = #20000 1'b1;
	R2[5] = #10000 1'b0;
	R2[5] = #10000 1'b1;
	R2[5] = #10000 1'b0;
	R2[5] = #20000 1'b1;
	R2[5] = #20000 1'b0;
	# 20000;
	repeat(2)
	begin
		R2[5] = 1'b1;
		R2[5] = #20000 1'b0;
		# 20000;
	end
	R2[5] = 1'b1;
	# 40000;
	repeat(3)
	begin
		R2[5] = 1'b0;
		R2[5] = #20000 1'b1;
		# 20000;
	end
	R2[5] = 1'b0;
	# 40000;
	repeat(3)
	begin
		R2[5] = 1'b1;
		R2[5] = #20000 1'b0;
		# 20000;
	end
	R2[5] = 1'b1;
	# 40000;
	repeat(3)
	begin
		R2[5] = 1'b0;
		R2[5] = #20000 1'b1;
		# 20000;
	end
	R2[5] = 1'b0;
	# 40000;
	repeat(3)
	begin
		R2[5] = 1'b1;
		R2[5] = #20000 1'b0;
		# 20000;
	end
	R2[5] = 1'b1;
	# 40000;
	repeat(2)
	begin
		R2[5] = 1'b0;
		R2[5] = #20000 1'b1;
		# 20000;
	end
end 
// R2[ 4 ]
initial
begin
	repeat(2)
	begin
		R2[4] = 1'b1;
		R2[4] = #20000 1'b0;
		# 20000;
	end
	R2[4] = 1'b1;
	R2[4] = #100000 1'b0;
	R2[4] = #80000 1'b1;
	# 80000;
	repeat(4)
	begin
		R2[4] = 1'b0;
		R2[4] = #80000 1'b1;
		# 80000;
	end
	R2[4] = 1'b0;
end 
// R2[ 3 ]
initial
begin
	repeat(4)
	begin
		R2[3] = 1'b0;
		R2[3] = #10000 1'b1;
		# 10000;
	end
	R2[3] = 1'b0;
	R2[3] = #10000 1'b1;
	R2[3] = #50000 1'b0;
	# 40000;
	repeat(10)
	begin
		R2[3] = 1'b1;
		R2[3] = #40000 1'b0;
		# 40000;
	end
	R2[3] = 1'b1;
end 
// R2[ 2 ]
initial
begin
	R2[2] = 1'b0;
	R2[2] = #100000 1'b1;
	# 20000;
	repeat(22)
	begin
		R2[2] = 1'b0;
		R2[2] = #20000 1'b1;
		# 20000;
	end
end 
// R2[ 1 ]
initial
begin
	R2[1] = 1'b0;
end 
// R2[ 0 ]
initial
begin
	R2[0] = 1'b0;
end 
// R3[ 15 ]
initial
begin
	R3[15] = 1'b0;
end 
// R3[ 14 ]
initial
begin
	R3[14] = 1'b0;
	R3[14] = #660000 1'b1;
end 
// R3[ 13 ]
initial
begin
	R3[13] = 1'b0;
	R3[13] = #340000 1'b1;
	R3[13] = #320000 1'b0;
end 
// R3[ 12 ]
initial
begin
	R3[12] = 1'b0;
	# 180000;
	repeat(2)
	begin
		R3[12] = 1'b1;
		R3[12] = #160000 1'b0;
		# 160000;
	end
	R3[12] = 1'b1;
end 
// R3[ 11 ]
initial
begin
	R3[11] = 1'b0;
	# 100000;
	repeat(4)
	begin
		R3[11] = 1'b1;
		R3[11] = #80000 1'b0;
		# 80000;
	end
	R3[11] = 1'b1;
	R3[11] = #80000 1'b0;
	R3[11] = #100000 1'b1;
end 
// R3[ 10 ]
initial
begin
	R3[10] = 1'b0;
	# 60000;
	repeat(9)
	begin
		R3[10] = 1'b1;
		R3[10] = #40000 1'b0;
		# 40000;
	end
	R3[10] = 1'b1;
	R3[10] = #40000 1'b0;
	R3[10] = #60000 1'b1;
	R3[10] = #40000 1'b0;
	R3[10] = #40000 1'b1;
end 
// R3[ 9 ]
initial
begin
	R3[9] = 1'b0;
	# 40000;
	repeat(20)
	begin
		R3[9] = 1'b1;
		R3[9] = #20000 1'b0;
		# 20000;
	end
	R3[9] = 1'b1;
	# 40000;
	repeat(3)
	begin
		R3[9] = 1'b0;
		R3[9] = #20000 1'b1;
		# 20000;
	end
end 
// R3[ 8 ]
initial
begin
	R3[8] = 1'b0;
	R3[8] = #20000 1'b1;
	R3[8] = #420000 1'b0;
	R3[8] = #420000 1'b1;
end 
// R3[ 7 ]
initial
begin
	R3[7] = 1'b0;
	R3[7] = #20000 1'b1;
	R3[7] = #200000 1'b0;
	R3[7] = #220000 1'b1;
	R3[7] = #220000 1'b0;
	R3[7] = #200000 1'b1;
end 
// R3[ 6 ]
initial
begin
	R3[6] = 1'b0;
	R3[6] = #20000 1'b1;
	R3[6] = #100000 1'b0;
	R3[6] = #100000 1'b1;
	R3[6] = #120000 1'b0;
	R3[6] = #100000 1'b1;
	R3[6] = #100000 1'b0;
	R3[6] = #120000 1'b1;
	R3[6] = #100000 1'b0;
	R3[6] = #100000 1'b1;
	R3[6] = #120000 1'b0;
end 
// R3[ 5 ]
initial
begin
	R3[5] = 1'b0;
	# 20000;
	repeat(3)
	begin
		R3[5] = 1'b1;
		R3[5] = #40000 1'b0;
		R3[5] = #60000 1'b1;
		R3[5] = #60000 1'b0;
		R3[5] = #40000 1'b1;
		R3[5] = #60000 1'b0;
		# 60000;
	end
	R3[5] = 1'b1;
end 
// R3[ 4 ]
initial
begin
	R3[4] = 1'b0;
	# 20000;
	repeat(6)
	begin
		R3[4] = 1'b1;
		R3[4] = #20000 1'b0;
		R3[4] = #20000 1'b1;
		R3[4] = #40000 1'b0;
		R3[4] = #20000 1'b1;
		R3[4] = #20000 1'b0;
		# 40000;
	end
	R3[4] = 1'b1;
end 
// R3[ 3 ]
initial
begin
	repeat(12)
	begin
		R3[3] = 1'b0;
		R3[3] = #40000 1'b1;
		# 40000;
	end
	R3[3] = 1'b0;
end 
// R3[ 2 ]
always
begin
	R3[2] = 1'b0;
	R3[2] = #20000 1'b1;
	#20000;
end 
// R3[ 1 ]
initial
begin
	R3[1] = 1'b0;
end 
// R3[ 0 ]
initial
begin
	R3[0] = 1'b0;
end 

MinAbsAddSub_vlg_sample_tst tb_sample (
	.C(C),
	.R1(R1),
	.R2(R2),
	.R3(R3),
	.sampler_tx(sampler)
);

MinAbsAddSub_vlg_check_tst tb_out(
	.InA(InA),
	.InB(InB),
	.InI0(InI0),
	.InI1(InI1),
	.O(O),
	.sampler_rx(sampler)
);
endmodule

